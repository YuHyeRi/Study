# Spring -02

## Q. 객체지향이란?

프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고, 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법

## Q. 객체지향 프로그래밍의 장점은?

1. 코드 재사용이 용이 → 남이 만든 클래스를 가져와서 사용 ⭕
2. 유지보수 용이 → 절차지향 프로그래밍은 일일히 찾아 수정해야 하는 반면, 해당하는 부분만 수정 ⭕ 
3. 대형 프로젝트에 적합 → 클래스 단위로 모듈화 시켜 개발가능

## Q. 객체지향적 설계 원칙

- SRP (Single Responsibility Principle) → 단일 책임 원칙 클래스

: 단 하나의 책임을 가져야하며, 클래스를 변경하는 이유는 단 하나의 이유여야 한다.

- OCP (Open-Closed Principle) → 개방-폐쇄 원칙

: 확장에는 열려 있어야 하고, 변경에는 닫혀 있어야 한다.

- LSP (Liskov Substitution Principle) → 리스코프 치환 원칙

: 상위 타입의 객체를 하위 타입의 객체로 치환해도 상위 타입을 사용하는 프로그램은 정상적으로 동작해야 한다.

- ISP (Interface Segregation Principle) → 인터페이스 분리 원칙

: 인터페이스는 그 인터페이스를 사용하는 클라이언트르르 기준으로 분리해야 한다.

- DIP (Dependency Inversion Prinsiple) → 의존 역전 원칙

: 고수준 모듈은 저수준 모듈의 구현에 의존해서는 안 된다.

## Q. 객체지향 프로그래밍 키워드

- 추상화 : 불필요한 정보는 숨기고 중요한 정보만을 표현함으로써 공통의 속성이나 기능을 묶어 이름을 붙이는 것
- 캡슐화 : 기능과 특성의 모음을 ‘클래스’라는 ‘캡슐’에 넣어서 분류해서 넣는 것
- 상속 : 상속은 부모클래스의 속성과 기능을 그대로 이어받아 사용할 수 있게 하고, 기능의 일부분을 변경해야 할 경우 상속받은 자식클래스에서 해당 기능만 재정의하여 사용할 수 있게 하는 것 (다중상속은 ❌)
- 다형성 : 하나의 변수명, 함수명 등이 상황에 따라 다른 의미로 해석될 수 있는 것. 즉, 오버라이딩, 오버로딩이 가능하다는 것

👉 오버라이딩 : 부모클래스의 메서드와 같은 이름, 매개변수를 재정의 하는 것

👉 오버로딩 : 같은 이름의 함수를 여러개 정의하고, 매개변수의 타입과 갯수를 다르게 하여 매개변수에 따라 다르게 호출할 수 있게 하는 것

## Q. 제네릭이란?

제네릭(Generic)은 클래스 내부에서 지정하는 것이 아닌 ***외부에서 사용자에 의해 지정되는*** 것

## Q. 컬렉션 클래스에서 제네렉을 사용하는 이유는?

컬렉션 클래스에 저장되는 인스턴스 타입을 제한하여 런타임에 발생할 수 있는 잠재적인 모든 예외를 컴파일 타임에 잡아낼 수 있어서 사용한다

## Q. 데드락이 무엇이고, 해결방법은?

what? 👉둘 이상의 스레드가 lock을 획득하기 위해 기다리는데, 이 lock을 잡고 있는 스레드도 똑같이 다른 lock을 기다리면서 서로 블락상태에 놓이는 것을 말한다.

how? 👉 우선순위를 선정하여 자원을 선점하도록 하는 것과 공유 불가능한 상호 배제 조건을 제거하는 것이 있다.

## Q. JVM이 하는 역할은 무엇인가?

- 자바 컴파일러가 .java 파일을 컴파일 하면 .class라는 자바 바이트코드로 변환시켜줌 → 이 때 바이트 코드가 기계어가 아니기 때문에 운영체제에서는 바로 실행을 못하는데 이때 운영체제가 이해할 수 있도록 해석해주는 것이 JVM
- 컴파일 → 바이트 코드 → 기계어 이런식으로 중간에 ‘바이트 코드’ 과정이 있기 때문에 속도와 메모리에서 단점이 될 수 있다.
- JVM을 사용하면 운영체제에 상관없이 같은 코드를 사용할 수 있다.

## Q. 스프링에서 AOP란?

AOP는 ‘ 관점 지향 프로그래밍 ‘ 의 약자로, 기존의 OOP (절자 지향 프로그래밍)에서 기능별로 클래스를 분리했음에도 불구하고, 공통으로 반복되는 중복코드가 발생하는데 이를 해결 할 수 있도록 실행시, 비즈니스 로직의 앞과 뒤에서 원하는 지점에 해당 공통 관심사를 수행할 수 있게 한다.

## Q. 스프링 DI에 대해 아는대로 말해보라

- DI는 ‘ 의존성 주입 ‘ 의 약자로, 객체들 간의 의존성을 줄이기 위해 사용되는 스프링의 IoC 컨테이너의 구체적 구현 방식을 말한다.
- Setter 주입, 생성자 주입, 필드 주입 3가지가 있다.
- 개발코드 부분에서 객체를 생성하는 것이 아니라, 데이터 주입만 담당하는 별도의 공간에서 객체를 생성하고 데이터 간의 의존성을 주입해 개발코드에서 가져다 쓰면서 의존성을 줄인다.

## Q. IoC란?

- IoC란 ‘ 제어의 역전 ‘ 으로 인스턴스의 생성 ~ 소멸 까지 개발자가 아닌 컨테이너가 대신 관리 해주는 것을 말한다.
- IoC 컨테이너는 DI를 통해 주입시킨다.
- 인스턴스의 생성의 제어를 Servlet과 같은 bean을 관리해주는 컨테이너가 관리한다.

## Q. Bean이란?

- Spring IoC 컨테이너가 관리하는 자바 객체를 Bean 이라고 부른다. 우리가 new 연산자로 어떤 객체를 생성했을 때 그 객체는 Bean이 아니다
- 즉, 스프링 컨테이너가 생성한 객체들을 Bean 이라고 부른다.

## Q. Entity란?

Entity 클래스는 ***실제 데이터베이스의 테이블과 1:1로 매핑되는 클래스***로 ***DB의 테이블 내에 존재하는 컬럼만을 속성으로*** 가져야 한다.

## Q. Setter를 무분별하게 사용하면 안되는 이유는?

엔티티를 작성할 때, Setter를 무분별하게 상요하면 객체(Entity)의 값을 변경시킬 수 있으므로 객체의 일관성을 보장할 수 ❌

## Q. DTO, VO 차이점은?

VO는 DTO와 동일한 개념이지만 read only 속성을 갖는다. VO는 특정한 비즈니스 값을 담는 객체이고, DTO는 Layer 간의 통신 용도로 오고가는 객체를 말한다.

## Q. Object란?

- 객체란, 소프으퉤어 세계에 구현할 대상
- 클래스의 인스턴스라고도 부른다. OOP 관점에서 클래스의 타입으로 선언되었을 때 객체라고 부름
- 객체는 현실 세계에 가깝고, 인스턴스는 소프트웨어 세계에 가깝다.

## Q. 클래스란?

- 연관되어 있는 변수와 메서드의 집합
- 클래스란, 객체를 만들어내기 위한 설계도 혹은 툴

## Q. 인스턴스란?

- 객체를 소프트웨어에 실체화 하면, 그것을 인스턴스라고 부른다.
- OOP 관점에서 메모리가 할당되어 실제 사용될 때 인스턴스라고 부른다.
- 객체는 클래스의 인스턴스이다.

```java
// 클래스
public class Animal {
...
}

// 객체와 인스턴스
public class Main {
	public static void main(String[] args) {
		Animal cat, dog;  // 객체

		// 인스턴스화
		cat = new Animal(); // cat은 Animal 클래스의 '인스턴스'
		dog = new Animal(); // dog는 Animal 클래스의 '인스턴스'
	}
}
```

## Q. 인스턴스화 된다는 것은 어떤 의미인지?

- 클래스로부터 객체를 만드는 과정을 클래스의 인스턴스화 라고 한다.
- 어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스라고 한다.

## Q. String, StringBuffer, StringBuilder 차이점은?

- 첫번째 차이점, String은 불변하다는 특징을 가지고 있어서 수정을 하지 못하고 새로운 String 인스턴스가 생성되고 전에 있던 String은 GC에 의해 사라지게 된다. 그래서 좋은 성능을 기대하기 힘들다 → String 불변 / StringBuffer, StringBuilder 가변
- StringBuffer는 동기화 키워드를 지원하여 멀티스레드 환경에서 안전하다는 점(thread-safe) 이다. 참고로 String도 불변성을 가지고 있기 때문에 마찬가지로 멀티스레드 환경에서의 안정성을 가지고 있다.
- 반대로 StirngBuilder는 동기화를 지원하지 않기 때문에 멀티스레드 환경에서 사용하는 것은 적합하지 않지만 동기화를 고려하지 않는 만큼 단일스레드에서의 성능은 StringBuffer 보다 뛰어나다.

## Q. 프로세스란?

- 운영체제로부터 시스템 자원을 할당받는 작업의 단위
- 하나의 프로세스에는 크게 코드영역(code), 데이터영역(data), 스택영역(stack), 힙영역(heap) 으로 이루어져 있다.

## Q. 스레드란?

한 프로세스 내에서 동작되는 여러 실행의 흐름으로 프로세스 하나에 자원을 공유하면서 일련의 과정 여러 개를 동시에 실행시킬 수 있다.

## Q. 멀티프로세스

- 장점 : 안정성이 높다 → 독립된 구조이기 때문에
- 단점 : 여러 프로세스를 왔다갔다하는 컨텍스트 스위칭으로 인한 성능저하

## Q, 멀티스레드

- 장점 : 응답시간 단축, 자원소모 감소
- 단점 : 미묘한 시간차나 변수 공유함으로써 오류 발생 가능

👉 노션 : https://www.notion.so/Spring-02-3e523c9242384e789b039ca02a3da67c
👉 출처 : [https://wookcode.tistory.com/99](https://wookcode.tistory.com/99)
